#include<stdio.h>
#include<pthread.h>
#include<semaphore.h>
#include<stdlib.h>


#define NUM_THREADS 1
pthread_mutex_t mutex;
sem_t sem_fuel;

int *count;
void *routine(void *arg)
{
 //   pthread_mutex_lock(&mutex);
  // while(1)
   {
      //  sem_wait(&sem_fuel);
      
        *count =100;
        printf("count :%d  \n",*count);
    
        sem_post(&sem_fuel);
    
    }
    //pthread_mutex_unlock(&mutex);
}

int main()
{
    pthread_t t[NUM_THREADS];
    
    count=(int *)malloc(sizeof(int));
    
    *count =50;
    
    pthread_mutex_init(&mutex,NULL);
    sem_init(&sem_fuel,0,1);
    for(int i=0;i<NUM_THREADS;i++)
    {
        if(pthread_create(&t[i],0,&routine,NULL)!=0)
        {
            perror("thread create failed");
        }
    }
    
    sem_wait(&sem_fuel);
    printf("deallocating the count %d\n",*count);
   // free(count);
    for(int i=0;i<NUM_THREADS;i++)
    {
        if(pthread_join(t[i],0)!=0)
        {
            perror("thread join failed");
        }
    }
    
    pthread_mutex_destroy(&mutex);
    sem_destroy(&sem_fuel);
    return 0;
}
