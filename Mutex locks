#include<pthread.h>
#include<unistd.h>
#include<stdlib.h>
#include<string.h>
#include<stdio.h>

pthread_t tid[2];
int counter;
pthread_mutex_t lock;

void *trythis(void *args)
{

    pthread_mutex_lock(&lock);
      int i=0;
      counter += 1;
      printf("%d job started \n",counter);
      for(i=0;i<10;i++);
      printf("job finshed %d\n",counter);
    pthread_mutex_unlock(&lock);
}


int main()
{
  int error;
  int i=0;
  if( pthread_mutex_init(&lock,0) !=0)
  {
    printf("mutex initialization failed \n");
    return 1;
  }

  while(i<2)
  {
    if(pthread_create(&tid[i],0,&trythis,NULL) !=0)
      printf("thread creaion failed\n);
    // error = pthread_create(&tid[i],0,&trythis,NULL);
    // if(error !=0)
    // printf(" error %s",strerror(error));
      i++;
    }

  pthread_join(tid[1],NULL);
  pthread_join(tid[0],NULL);
  pthread_mutex_destroy(&lock));
  return 0;
}
