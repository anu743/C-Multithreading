#include<stdio.h>
#include<pthread.h>
#include<stdlib.h>
#include<semaphore.h>

#define BUFFER_SIZE 5
#define MAX_ITEMS 20

int buffer[BUFFER_SIZE];
int in=0,out=0;
int consumer_count=0,producer_count=0;

sem_t mutex,full,empty;

void *producer_fun(void *arg)
{
    
    int item=1;
    
    while(producer_count<MAX_ITEMS)
    {
        sem_wait(&mutex);
        //sem_wait(&f);
        buffer[in]=item;
        printf("Producer item %d\n",item);
        
        item++;
        in =(in+1) %BUFFER_SIZE;
        producer_count++;
        
        
        sem_post(&mutex);
        //sem_post(&full);
    }
    
    pthread_exit(0);
    
}


void *consumer_fun(void *arg)
{
    int item;
    
    while(consumer_count<MAX_ITEMS)
    {
        sem_wait(&mutex);
        //sem_wait(&full);
        
        item = buffer[out];
        out = (out+1)% BUFFER_SIZE;
        
        printf("consumer item is %d\n",item);
        consumer_count++;
        sem_post(&mutex);
        //sem_post(&empty);
    }
    pthread_exit(0);
}

int main()
{
    pthread_t producer,consumer;
    
    pthread_create(&producer,NULL,&producer_fun,NULL);
    pthread_create(&consumer,NULL,*&consumer_fun,NULL);
    
    sem_init(&mutex,0,1);
    sem_init(&full,0,0);
    sem_init(&empty,0,BUFFER_SIZE);
    
    pthread_join(producer,NULL);
    pthread_join(consumer,NULL);
    
    
    sem_destroy(&mutex);
    sem_destroy(&full);
    sem_destroy(&empty);
    return 0;
    
}
